// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/lottie_thorvg.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class ThorVGFlutterBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ThorVGFlutterBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ThorVGFlutterBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void create() {
    return _create();
  }

  late final _createPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('create');
  late final _create = _createPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> error() {
    return _error();
  }

  late final _errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('error');
  late final _error = _errorPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Float> size() {
    return _size();
  }

  late final _sizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function()>>('size');
  late final _size = _sizePtr.asFunction<ffi.Pointer<ffi.Float> Function()>();

  double duration() {
    return _duration();
  }

  late final _durationPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('duration');
  late final _duration = _durationPtr.asFunction<double Function()>();

  double totalFrame() {
    return _totalFrame();
  }

  late final _totalFramePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('totalFrame');
  late final _totalFrame = _totalFramePtr.asFunction<double Function()>();

  double curFrame() {
    return _curFrame();
  }

  late final _curFramePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('curFrame');
  late final _curFrame = _curFramePtr.asFunction<double Function()>();

  void resize(
    int w,
    int h,
  ) {
    return _resize(
      w,
      h,
    );
  }

  late final _resizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'resize');
  late final _resize = _resizePtr.asFunction<void Function(int, int)>();

  int load(
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Char> mimetype,
    int width,
    int height,
  ) {
    return _load(
      data,
      mimetype,
      width,
      height,
    );
  }

  late final _loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Int)>>('load');
  late final _load = _loadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Uint8> render() {
    return _render();
  }

  late final _renderPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function()>>('render');
  late final _render =
      _renderPtr.asFunction<ffi.Pointer<ffi.Uint8> Function()>();

  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  bool frame(
    double now,
  ) {
    return _frame(
      now,
    );
  }

  late final _framePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Float)>>('frame');
  late final _frame = _framePtr.asFunction<bool Function(double)>();

  bool update() {
    return _update();
  }

  late final _updatePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('update');
  late final _update = _updatePtr.asFunction<bool Function()>();
}
