// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/thorvg.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class ThorVGFlutterBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ThorVGFlutterBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ThorVGFlutterBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<FlutterLottieAnimation> create() {
    return _create();
  }

  late final _createPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<FlutterLottieAnimation> Function()>>(
      'create');
  late final _create =
      _createPtr.asFunction<ffi.Pointer<FlutterLottieAnimation> Function()>();

  bool destroy(
    ffi.Pointer<FlutterLottieAnimation> animation,
  ) {
    return _destroy(
      animation,
    );
  }

  late final _destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<FlutterLottieAnimation>)>>('destroy');
  late final _destroy = _destroyPtr
      .asFunction<bool Function(ffi.Pointer<FlutterLottieAnimation>)>();

  ffi.Pointer<ffi.Char> error(
    ffi.Pointer<FlutterLottieAnimation> animation,
  ) {
    return _error(
      animation,
    );
  }

  late final _errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FlutterLottieAnimation>)>>('error');
  late final _error = _errorPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<FlutterLottieAnimation>)>();

  ffi.Pointer<ffi.Float> size(
    ffi.Pointer<FlutterLottieAnimation> animation,
  ) {
    return _size(
      animation,
    );
  }

  late final _sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<FlutterLottieAnimation>)>>('size');
  late final _size = _sizePtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<FlutterLottieAnimation>)>();

  double duration(
    ffi.Pointer<FlutterLottieAnimation> animation,
  ) {
    return _duration(
      animation,
    );
  }

  late final _durationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<FlutterLottieAnimation>)>>('duration');
  late final _duration = _durationPtr
      .asFunction<double Function(ffi.Pointer<FlutterLottieAnimation>)>();

  double totalFrame(
    ffi.Pointer<FlutterLottieAnimation> animation,
  ) {
    return _totalFrame(
      animation,
    );
  }

  late final _totalFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<FlutterLottieAnimation>)>>('totalFrame');
  late final _totalFrame = _totalFramePtr
      .asFunction<double Function(ffi.Pointer<FlutterLottieAnimation>)>();

  double curFrame(
    ffi.Pointer<FlutterLottieAnimation> animation,
  ) {
    return _curFrame(
      animation,
    );
  }

  late final _curFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<FlutterLottieAnimation>)>>('curFrame');
  late final _curFrame = _curFramePtr
      .asFunction<double Function(ffi.Pointer<FlutterLottieAnimation>)>();

  void resize(
    ffi.Pointer<FlutterLottieAnimation> animation,
    int w,
    int h,
  ) {
    return _resize(
      animation,
      w,
      h,
    );
  }

  late final _resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FlutterLottieAnimation>, ffi.Int,
              ffi.Int)>>('resize');
  late final _resize = _resizePtr.asFunction<
      void Function(ffi.Pointer<FlutterLottieAnimation>, int, int)>();

  bool load(
    ffi.Pointer<FlutterLottieAnimation> animation,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Char> mimetype,
    int width,
    int height,
  ) {
    return _load(
      animation,
      data,
      mimetype,
      width,
      height,
    );
  }

  late final _loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<FlutterLottieAnimation>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int)>>('load');
  late final _load = _loadPtr.asFunction<
      bool Function(ffi.Pointer<FlutterLottieAnimation>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Uint8> render(
    ffi.Pointer<FlutterLottieAnimation> animation,
  ) {
    return _render(
      animation,
    );
  }

  late final _renderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<FlutterLottieAnimation>)>>('render');
  late final _render = _renderPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<FlutterLottieAnimation>)>();

  bool frame(
    ffi.Pointer<FlutterLottieAnimation> animation,
    double now,
  ) {
    return _frame(
      animation,
      now,
    );
  }

  late final _framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<FlutterLottieAnimation>, ffi.Float)>>('frame');
  late final _frame = _framePtr
      .asFunction<bool Function(ffi.Pointer<FlutterLottieAnimation>, double)>();

  bool update(
    ffi.Pointer<FlutterLottieAnimation> animation,
  ) {
    return _update(
      animation,
    );
  }

  late final _updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<FlutterLottieAnimation>)>>('update');
  late final _update = _updatePtr
      .asFunction<bool Function(ffi.Pointer<FlutterLottieAnimation>)>();
}

final class _FlutterLottieAnimation extends ffi.Opaque {}

typedef FlutterLottieAnimation = _FlutterLottieAnimation;
